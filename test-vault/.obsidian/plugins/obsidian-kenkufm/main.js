"use strict";var it=Object.defineProperty;var rt=(e,t,n)=>t in e?it(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var M=(e,t,n)=>(rt(e,typeof t!="symbol"?t+"":t,n),n);const r=require("obsidian");function k(){}function Q(e){return e()}function Y(){return Object.create(null)}function F(e){e.forEach(Q)}function Z(e){return typeof e=="function"}function tt(e,t){return e!=e?t==t:e!==t||e&&typeof e=="object"||typeof e=="function"}function lt(e){return Object.keys(e).length===0}function a(e,t){e.appendChild(t)}function et(e,t,n){e.insertBefore(t,n||null)}function I(e){e.parentNode&&e.parentNode.removeChild(e)}function l(e){return document.createElement(e)}function y(e){return document.createTextNode(e)}function w(){return y(" ")}function ct(e,t,n,s){return e.addEventListener(t,n,s),()=>e.removeEventListener(t,n,s)}function p(e,t,n){n==null?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function ut(e){return Array.from(e.childNodes)}function nt(e,t){t=""+t,e.data!==t&&(e.data=t)}function G(e,t){e.value=t??""}let A;function C(e){A=e}const b=[],X=[];let x=[];const z=[],dt=Promise.resolve();let q=!1;function ft(){q||(q=!0,dt.then(st))}function R(e){x.push(e)}const V=new Set;let $=0;function st(){if($!==0)return;const e=A;do{try{for(;$<b.length;){const t=b[$];$++,C(t),pt(t.$$)}}catch(t){throw b.length=0,$=0,t}for(C(null),b.length=0,$=0;X.length;)X.pop()();for(let t=0;t<x.length;t+=1){const n=x[t];V.has(n)||(V.add(n),n())}x.length=0}while(b.length);for(;z.length;)z.pop()();q=!1,V.clear(),C(e)}function pt(e){if(e.fragment!==null){e.update(),F(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(R)}}function ht(e){const t=[],n=[];x.forEach(s=>e.indexOf(s)===-1?t.push(s):n.push(s)),n.forEach(s=>s()),x=t}const gt=new Set;function yt(e,t){e&&e.i&&(gt.delete(e),e.i(t))}function wt(e,t,n){const{fragment:s,after_update:o}=e.$$;s&&s.m(t,n),R(()=>{const d=e.$$.on_mount.map(Q).filter(Z);e.$$.on_destroy?e.$$.on_destroy.push(...d):F(d),e.$$.on_mount=[]}),o.forEach(R)}function _t(e,t){const n=e.$$;n.fragment!==null&&(ht(n.after_update),F(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}function mt(e,t){e.$$.dirty[0]===-1&&(b.push(e),ft(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}function ot(e,t,n,s,o,d,c=null,_=[-1]){const u=A;C(e);const i=e.$$={fragment:null,ctx:[],props:d,update:k,not_equal:o,bound:Y(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(t.context||(u?u.$$.context:[])),callbacks:Y(),dirty:_,skip_bound:!1,root:t.target||u.$$.root};c&&c(i.root);let h=!1;if(i.ctx=n?n(e,t.props||{},(f,E,...v)=>{const S=v.length?v[0]:E;return i.ctx&&o(i.ctx[f],i.ctx[f]=S)&&(!i.skip_bound&&i.bound[f]&&i.bound[f](S),h&&mt(e,f)),E}):[],i.update(),h=!0,F(i.before_update),i.fragment=s?s(i.ctx):!1,t.target){if(t.hydrate){const f=ut(t.target);i.fragment&&i.fragment.l(f),f.forEach(I)}else i.fragment&&i.fragment.c();t.intro&&yt(e.$$.fragment),wt(e,t.target,t.anchor),st()}C(u)}class at{constructor(){M(this,"$$");M(this,"$$set")}$destroy(){_t(this,1),this.$destroy=k}$on(t,n){if(!Z(n))return k;const s=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return s.push(n),()=>{const o=s.indexOf(n);o!==-1&&s.splice(o,1)}}$set(t){this.$$set&&!lt(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}const kt="4";typeof window<"u"&&(window.__svelte||(window.__svelte={v:new Set})).v.add(kt);function vt(e){let t,n,s,o,d,c,_,u,i,h,f,E,v,S,N,B,g,D,j,W,L,H,O,P,J;return{c(){t=l("div"),n=l("h1"),n.textContent="Example View",s=w(),o=l("p"),d=y("This is an example of an Obsidian View made with "),c=l("a"),_=y("Svelte"),u=y(`\r
    and `),i=l("a"),h=y("Tailwindcss"),f=y("."),E=w(),v=l("h2"),v.textContent="Reactivity",S=w(),N=l("h3"),N.textContent="Input",B=w(),g=l("input"),D=w(),j=l("button"),j.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-play"><polygon points="6 3 20 12 6 21 6 3"></polygon></svg>Hello World',W=w(),L=l("p"),H=y("Input: "),O=y(e[0]),p(n,"class",""),p(c,"href",$t),p(i,"href",bt),p(g,"type","text"),p(g,"placeholder","Write here"),p(g,"maxlength","115"),p(j,"class","mod-cta"),p(t,"class","break-words")},m(m,U){et(m,t,U),a(t,n),a(t,s),a(t,o),a(o,d),a(o,c),a(c,_),a(o,u),a(o,i),a(i,h),a(o,f),a(t,E),a(t,v),a(t,S),a(t,N),a(t,B),a(t,g),G(g,e[0]),a(t,D),a(t,j),a(t,W),a(t,L),a(L,H),a(L,O),P||(J=ct(g,"input",e[1]),P=!0)},p(m,[U]){U&1&&g.value!==m[0]&&G(g,m[0]),U&1&&nt(O,m[0])},i:k,o:k,d(m){m&&I(t),P=!1,J()}}}let $t="https://svelte.dev/",bt="https://tailwindcss.com/";function xt(e,t,n){let s="";function o(){s=this.value,n(0,s)}return[s,o]}class Et extends at{constructor(t){super(),ot(this,t,xt,vt,tt,{})}}const T="example-view";class St extends r.ItemView{getViewType(){return T}getDisplayText(){return"Example view"}async onOpen(){this.component=new Et({target:this.contentEl})}async onClose(){this.component.$destroy()}}class K{static async init(){console.log("Loading Kenku FM Tracks...");try{const{tracks:t,playlists:n}=await r.requestUrl("http://127.0.0.1:3333/v1/playlist").json;this.tracks=t,this.playlists=n,console.log(`[Kenku Controls] ${this.tracks.length} Tracks Loaded`);const{sounds:s,soundboards:o}=await r.requestUrl("http://127.0.0.1:3333/v1/soundboard").json;this.sounds=s,this.soundboards=o,console.log(`[Kenku Controls] ${this.sounds.length} Sounds Loaded`)}catch(t){console.log(t),new r.Notice(`Failed to load Kenku FM data
is Kenku Remote running?`)}}static async queuePlaylist(t){}static async getState(){try{return await r.requestUrl("http://127.0.0.1:3333/v1/playlist/playback").json}catch(t){throw new r.Notice(`Failed to load Kenku FM data
is Kenku Remote running?`),t}}static async resume(){try{const t=await r.requestUrl("http://127.0.0.1:3333/v1/playlist/play").json}catch(t){throw new r.Notice(`Failed to load Kenku FM data
is Kenku Remote running?`),t}}static async pause(){try{const t=await r.requestUrl("http://127.0.0.1:3333/v1/playlist/pause").json}catch(t){throw new r.Notice(`Failed to load Kenku FM data
is Kenku Remote running?`),t}}static async playTrack(t){const{playing:n,track:s}=await this.getState();if(n&&t===s.id){console.warn("doing nothing as we are already playing this track");return}let o={url:"http://127.0.0.1:3333/v1/playlist/play",method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:t})};await r.requestUrl(o)}static async playSound(t){let n={url:"http://127.0.0.1:3333/v1/soundboard/play",method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:t})};await r.requestUrl(n)}}K.tracks=[];K.sounds=[];K.playlists=[];K.soundboards=[];function Tt(e){let t,n,s=e[0].title+"",o,d,c,_,u;return{c(){t=l("div"),n=l("p"),o=y(s),d=w(),c=l("button"),c.textContent="Play",_=w(),u=l("button"),u.textContent="Pause",p(c,"class","mr-2"),p(u,"class","ml-2"),p(t,"class","flex flex-row justify-center")},m(i,h){et(i,t,h),a(t,n),a(n,o),a(t,d),a(t,c),a(t,_),a(t,u)},p(i,[h]){h&1&&s!==(s=i[0].title+"")&&nt(o,s)},i:k,o:k,d(i){i&&I(t)}}}function Ct(e,t,n){let{config:s}=t;return e.$$set=o=>{"config"in o&&n(0,s=o.config)},[s]}class Kt extends at{constructor(t){super(),ot(this,t,Ct,Tt,tt,{config:0})}}const jt={mySetting:"default"};class Lt extends r.Plugin{async loadSettings(){this.settings=Object.assign({},jt,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async onload(){await this.loadSettings(),await K.init(),this.registerView(T,t=>new St(t)),this.addRibbonIcon("dice","Activate view",()=>{this.activateView()}),this.registerMarkdownCodeBlockProcessor("kenkufm",this.postprocessor.bind(this))}onunload(){console.log("unloading plugin")}async activateView(){this.app.workspace.detachLeavesOfType(T),await this.app.workspace.getRightLeaf(!1).setViewState({type:T,active:!0}),this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(T)[0])}async postprocessor(t,n,s){try{let o=r.parseYaml(t);console.log(o),n.addClass("kenkufm-button-container");let d=new Kt({target:n,props:{config:o}})}catch(o){console.error(`Kenku FM button Error:
${o}`)}}}module.exports=Lt;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
